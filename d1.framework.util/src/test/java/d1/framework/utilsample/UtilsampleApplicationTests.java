package d1.framework.utilsample;

import d1.framework.util.AlgorithmHelper;
import d1.framework.util.HttpHelper;
import d1.framework.util.MiscHelper;
import d1.framework.util.RSAHelper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.HashMap;
import java.util.Map;

@RunWith(SpringRunner.class)
@SpringBootTest
public class UtilsampleApplicationTests {
    /***
     * 电子卡应用私钥
     */
    public static final String codePrivateKey = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCCpSCH5eRgjutjsxP5vG9pZij/SMQKYHAJ/SEYiF2bOR8tj+RSfyZ6gosUhNDDSR7zewCFcgGn9P3hEVo1vP+ZB2Bv+5po0o8tBpNtr5x0RVtxQ0AGHGurdTIXv2eNqSyVH6iU2GyzPHykI9v6rjku/7bII8Tnmx+4rcovW8+qWiEzfoiG17JZJlc+gBt8JMI9EBscbFwOwtPBvHwyYuJGyTNwzk1J5j/FLhGhE872Fn4IRGdQ/EzS1M1GkX/dFezcc89SQZ9XmsPJKKKUEDrsCx3898PYOG6KiL3bMS3zTT/CejiD+Glrhzw4pM6/UlETyojork1Hv0L/r3XMb/KHAgMBAAECggEABUPEQNW5005PHBBuYKUAVF4Cju8Ov2BNg4mI2OU96HBv2jUvPUfUdCFom2YSx5vdvHAbgEUs3ejYhkZdvUalgjQy5bBc85ZwoJ7gOA5YnrLg0XqlTNm+WQV7BEv5T1Me8c95yq3CC6MHXtH3Hm4A7ezuH7iZScANkjKmsCvh/XpfMEFiPxchgQHoZKY6ko9LrTJ2khBh03+IbmL+jvW9ehZ4U5104X+/QFsNJVZPfVPEUnSw8eHMyLzzxFExnJ7hHa1M7gSwb9uB4ygncyjj9Ck3XFG1bb9iaL37uehwK2yNA+laCiOOvSyPQ0CtStJRT93ZDLYiVKiVnNZr2nxIAQKBgQDnTCd0IZ2q6TVGKiXrx5QvAVUnaeq3s5yhfApNhWvPAMGTAGR8Ft/bhuQtoPcyrAVwmhPxFPU8d4fsJ8N9XO5WMuoROXAtczxQWp1tt/nbGL9x7OvHGi3LhoApGV53+2gwJUuw9o/D11haJ9FsQreNJ9c46kAjvvC1V0HJtkrMAQKBgQCQmQ9M9VRWU8qLpU3B5phOjpgs7v9HHj2QZucc8Puvi9OhZnNEv2uEUXO3kUXrtmmu5jDoXbAlugeF+ir5spvvAt6xqJtP6ZvVj385lDohr7Rn9r2XyneTAnHODhfp10FlQgd4Yh5ocK09yFNhX0WMXHlg//ajyXgo51WprBZehwKBgQCaStzOxVXuGx+krJ0bScl6CcOKRUeEP9auipY83FHshq6ap1pgxMmUIcm4/nWoYcRHNyEyYy6spXgQev4XdJSw/8nQr6Y7S3HikHAQLvgHxdx/3PHzoW0HJbP8tqWkGBuKcnapl/CTTeXsTj+PnnnfOcKCfxFGRys/bPO/4VDIAQKBgCIfnNbChpagy4nNBt6ddpADYrIn7KJx5oFvZ1cTH7I7w0Oxk75DljHxrudBJ0kLEUGvHReZFHqyvhfGA+JNXjM3cCpo6c4gCSCK7rE948ITXvWx6ugpZbKRvx2rgcUzgUFOJckpDpgDDz8nSVYPT7BiGlrjzOa2It80SKjz7Yt9AoGBAKTcry2A2Ob43zHk5AoVSrnKfiYhJ/epaqonEgoRHucHdyqjNJLt2tjkMBWV0yrjXqWj7vi3i4p+Ia00Tfi68vNQJEdtV+o5DQ4wpm3Xx2D8PxQI9cQ2vlV5Wg7jKnwTdT+qdlpwmvD8mqCFY2eLIVIws2R5L8dEjfTu+4WCqlRd";

    /***
     * 校园码离线解码公钥<br/>
     * 默认30天变化一次<br/>
     * 注意此公钥定期变化，请使用接口拉取最新公钥，这里为了演示配置在这里
     */
    public static final String codePublicKey = "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIwHbJ4ERDzJNoG0B+dE/hE0NpoevBqu1wy/buzLF5MiALyFMx/YpIm2P+4rGpbRQIiNrs2RbDHQoKLk77A8xI0CAwEAAQ==";
    private String testbase64 = "";
    private String privatestring = "MIIBVwIBADANBgkqhkiG9w0BAQEFAASCAUEwggE9AgEAAkEAwvO8TQn3FDPE8kJSIqhL1bXp80EL\n" +
            "Qcfvvo2dJbfOXY+dajf5TKHHbRiQoRASkICz5Mt+FbsmrR8vs9yGlB42NwIDAQABAkEAsBey5a9z\n" +
            "o6bjZaQsRqvX3BE2YghFn8R2NJv7737og67K/t1jHCM6ase8Wm/E6EzJBczom51zGYWSs2faVx/p\n" +
            "iQIhAN/kw1dvNgUOb0Oi98QiQiVVXvFcHwoUMFtPEUlf14gFAiEA3uiEKW2ukjCjjYgDRBch0IdU\n" +
            "KonQkLl3x0F/uH4iRgsCIQDTcPOZ6wkVFWC2e32J2OCm6UzUm68kkZRpZu5oYP7nEQIhAIclReuw\n" +
            "OiUcJC0NB53iwHejdN4NjEwShpJiHcOHhdQdAiEA3LsfS3Vm8HMKNoCSTrvu5u1mGZBwrxe9JHqe\n" +
            "fEdmKCU=";
    private String publicstring = "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMLzvE0J9xQzxPJCUiKoS9W16fNBC0HH776NnSW3zl2P\n" +
            "nWo3+Uyhx20YkKEQEpCAs+TLfhW7Jq0fL7PchpQeNjcCAwEAAQ==";

    @Test
    public void contextLoads() throws Exception {
        System.out.println(MiscHelper.getUUID32());
        testrsa();
    }

    private void testjsrsa2() throws Exception {
        String value = "dHt075moS3cYKZX3xS1juSgnuTA4I1nRWihXDCv/AuVlJd3Ahx9rwsIvCwfT/q9HOWV8L4P7Lxm2dCXYjnntOQ==";
        byte[] afterEncrypt = RSAHelper.base642Byte(value);
        PublicKey publicKey = RSAHelper.string2PublicKey(publicstring);
        byte[] afterDecrypt = RSAHelper.publicDecrypt(afterEncrypt, publicKey);
        System.out.println(new String(afterDecrypt, "utf-8"));
    }

    private void testjsrsa1() throws Exception {
        String value = "urVH6c3METFDum9i35hcISj2LD55YtXyN7L03XL/mcK7vuLhV8OGLxCDnriP907P+gW7Xj8O2WLTmZU88POM1w==";
        PrivateKey privateKey = RSAHelper.string2PrivateKey(privatestring);

        byte[] afterEncrypt = RSAHelper.base642Byte(value);
        byte[] afterDecrypt = RSAHelper.privateDecrypt(afterEncrypt, privateKey);
        System.out.println(new String(afterDecrypt, "utf-8"));
    }

    private void testrsa() throws Exception {
//        KeyPair pair = RSAHelper.getKeyPair(512);

//        PublicKey publicKey = RSAHelper.string2PublicKey( publicstring);
//        PrivateKey privateKey = RSAHelper.string2PrivateKey( privatestring);
        PublicKey publicKey = RSAHelper.string2PublicKey(codePublicKey);
        PrivateKey privateKey = RSAHelper.string2PrivateKey(codePrivateKey);
        byte[] data = "我iamwho".getBytes("utf-8");
        byte[] afterEncrypt = RSAHelper.publicEncrypt(data, publicKey);
        String v = RSAHelper.byte2Base64(afterEncrypt);
        System.out.println(v);
        byte[] afterDecrypt = RSAHelper.privateDecrypt(afterEncrypt, privateKey);
        System.out.println(new String(afterDecrypt, "utf-8"));

        afterEncrypt = RSAHelper.privateEncrypt(data, privateKey);
        afterDecrypt = RSAHelper.publicDecrypt(afterEncrypt, publicKey);
        System.out.println(new String(afterDecrypt, "utf-8"));
    }

    private void testmd5() throws UnsupportedEncodingException {
        String test = "我iamwho";//E8B9CDF2F6742A5F613DB2298873D8AD
        System.out.println(AlgorithmHelper.md5_32(test, true));
    }

    private void testBase64() throws Exception {
        String temp = MiscHelper.file2Base64("C:\\Users\\liuyi\\Desktop\\1.jpg");
        System.out.print(temp.equals(testbase64));
    }

    private void testheader() throws Exception {
        Test0 test0 = new Test0();
        test0.image = testbase64;
        String url = "http://ocrcp.market.alicloudapi.com/rest/160601/ocr/ocr_vehicle_plate.json";
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("Authorization", "APPCODE 09360871641a44a380be995b40f00930");
        String ss = HttpHelper.<String>postObjectAsJSON(url, test0, String.class, headers);

    }

    private void testdownload() throws Exception {
        String url = "http://olpxrx06o.bkt.clouddn.com/car1.jpg";
        byte[] data = HttpHelper.downloadFileAsByte(url);
        String filepath = "C:\\Users\\liuyi\\Desktop\\1.jpg";
        File file = new File(filepath);
        if (file.exists()) {
            file.delete();
        }
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(data, 0, data.length);
        fos.flush();
        fos.close();

    }

    private void testhttp1() throws Exception {
        String s = "<xml><nonce_str><![CDATA[35f4094e40f44406b487b16cbbdcdf34]]></nonce_str><out_trade_no><![CDATA[1537423610890]]></out_trade_no><appid><![CDATA[wxfd4760906693c291]]></appid><sign><![CDATA[013CB6C3BFA7095188789525152E1E9B]]></sign><trade_type><![CDATA[APP]]></trade_type><mch_id><![CDATA[1449496302]]></mch_id><notify_url><![CDATA[http://www.baidu.com]]></notify_url></xml>";
        String ss = HttpHelper.<String>postObjectAsJSON("https://open.ucpaas.com/ol/sms/sendsms", s, String.class);
    }

    private void testsign() throws Exception {
        Test3 test3 = new Test3();
        Map<String, Object> map = MiscHelper.objectToMapWithoutNull(test3);
        String sign = AlgorithmHelper.hmacSign(map, "key", "192006250b4c09247ec02edce69f6a2d");
        System.out.println(sign);//9A0A8659F005D6984697E2CA0A9CF3B7
    }

    private void testobjecttomap() throws Exception {
        Test2 test2 = new Test2();
        test2.mobile = "18513197785";
        test2.code = "ss";
        test2.count = "sd";
        test2.msg = "sdfa";
        Map<String, Object> map = MiscHelper.objectToMapWithoutNull(test2);
    }

    private void testhttp() throws Exception {
        Test1 test1 = new Test1();
        test1.appid = "113f067fca4644978bb91a1e3a7ba3b1";
        test1.mobile = "18513197785";
        test1.sid = "053308d91b5e169e2e856644f5bd468f";
        test1.token = "3b7ead851e3ffb43608cde1335dff397";
        test1.param = "1232123";
        test1.templateId = "368230";
        Test2 test2 = HttpHelper.<Test2>postObjectAsJSON("https://open.ucpaas.com/ol/sms/sendsms", test1, Test2.class);
        System.out.println(test2.code);
    }

    class Test0 {
        String image;

        public String getImage() {
            return image;
        }

        public void setImage(String image) {
            this.image = image;
        }
    }

    class Test1 {
        String sid;
        String token;
        String appid;
        String templateId;
        String param;
        String mobile;

        public String getSid() {
            return sid;
        }

        public void setSid(String sid) {
            this.sid = sid;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public String getAppid() {
            return appid;
        }

        public void setAppid(String appid) {
            this.appid = appid;
        }

        public String getTemplateId() {
            return templateId;
        }

        public void setTemplateId(String templateId) {
            this.templateId = templateId;
        }

        public String getParam() {
            return param;
        }

        public void setParam(String code) {
            this.param = code;
        }

        public String getMobile() {
            return mobile;
        }

        public void setMobile(String mobile) {
            this.mobile = mobile;
        }
    }

}
